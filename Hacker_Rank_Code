-- HackerRank Set problem 

/* TASK
You are given a set A and N number of other sets. These N number of sets have to perform some specific mutation operations on set A.

Your task is to execute those operations and print the sum of elements from set .

Input Format

The first line contains the number of elements in set A.
The second line contains the space separated list of elements in set .
The third line contains N integer , the number of other sets.
The next 2*N lines are divided into N parts containing two lines each.
The first line of each part contains the space separated entries of the operation name and the length of the other set.
The second line of each part contains space separated list of elements in the other set.

 0 < len(set(A)) < 1000
 0 < len(otherSets) < 100
 0 < N < 100

Output Format

Output the sum of elements in set A.*/

a=set()
b=set()
sum=0

def read_STDIN(x):
    
    for i in input().split():
        x.add(int(i))

number_of_arguments = int(input())

read_STDIN(a)

number_of_arguments = int(input())

for i in range(number_of_arguments):
    b=set()
    command = input().split(' ')[0]
    
		if command == 'update':
        read_STDIN(b)
        a.update(b)
        
    elif command == 'intersection_update':
        read_STDIN(b)
        a.intersection_update(b)
        
    elif command == 'difference_update':
        read_STDIN(b)
        a.difference_update(b)
        
    elif command == 'symmetric_difference_update':
        read_STDIN(b)
        a.symmetric_difference_update(b)
        
    else:
        print()

for i in a:
    sum+=i

print(sum)
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/* TASK
Mr. Anant Asankhya is the manager at the INFINITE hotel. The hotel has an infinite amount of rooms.

One fine day, a finite number of tourists come to stay at the hotel.
The tourists consist of:
→ A Captain.
→ An unknown group of families consisting of K members per group where K≠1 .

The Captain was given a separate room, and the rest were given one room per group.

Mr. Anant has an unordered list of randomly arranged room entries. The list consists of the room numbers for all of the tourists. The room numbers will appear K times per group except for the Captain's room.

Mr. Anant needs you to help him find the Captain's room number.
The total number of tourists or the total number of groups of families is not known to you.
You only know the value of K and the room number list.

Input Format

The first line consists of an integer, K , the size of each group.
The second line contains the unordered elements of the room number list.


Constraints
1 < K < 1000

Output Format

Output the Captain's room number.
*/
people_each_room = input()
people_room_no = []

for i in input().split():
    people_room_no.append(int(i))

people_room_no.sort()    

for i in range(len(people_room_no)):
    if i==0:
        if people_room_no[i]==people_room_no[i+1]:
            pass
        else:
            print(people_room_no[i])
    elif 0<i<len(people_room_no)-2:
        if (people_room_no[i-1]==people_room_no[i]) or (people_room_no[i]==people_room_no[i+1]):
            pass
        else :
            print(people_room_no[i])   
    else:
        if people_room_no[i]==people_room_no[i-1]:
            pass
        else:
            print(people_room_no[i])
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/* TASK
You are given two sets, A and B.
Your job is to find whether set A is a subset of set B.

If set A is subset of set B, print True.
If set A is not a subset of set B, print False.

Input Format

The first line will contain the number of test cases, .
The first line of each test case contains the number of elements in set A.
The second line of each test case contains the space separated elements of set A.
The third line of each test case contains the number of elements in set B.
The fourth line of each test case contains the space separated elements of set B.

Output Format

True is A is subset of B
False if A is not a subset of B
*/

number_of_test_cases = int(input())

for i in range(number_of_test_cases):
    A=set()
    B=set()
    number_of_elements_A = int(input())
    counter=0
    for i in input().split():
        counter+=1
        if counter<=number_of_elements_A:
            A.add(int(i))
        else:
            pass
        
    number_of_elements_B = int(input())
    counter=0
    for i in input().split():
        counter+=1
        if counter<=number_of_elements_B:
            B.add(int(i))
        else:
            pass
    
    C = A-B

    if len(C)==0:
        print('True')
    else:
     print('False')
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/* TASK
You are given a set A and n other sets.
Your job is to find whether set A is a strict superset of each of the N sets.

Print True, if A is a strict superset of each of the N sets. Otherwise, print False.

A strict superset has at least one element that does not exist in its subset.

Input Format

The first line contains the space separated elements of set .
The second line contains integer , the number of other sets.
The next  lines contains the space separated elements of the other sets.

Output Format

Print True if set A is a strict superset of all other N sets. Otherwise, print False.
*/

A=set()
for i in input().split():
    A.add(int(i))

n = int(input())
for i in range(n):
    B=set()
    for i in input().split():
        B.add(int(i))
    
    if len(A-B)>0 and len(B-A) == 0:
        is_superset=True
    else:
        is_superset=False
        print('False')
        break
if is_superset:
    print('True')
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/* TASK
You are given a string, and you have to validate whether it's a valid Roman numeral. If it is valid, print True. Otherwise, print False. Try to create a regular expression for a valid Roman numeral.

Input Format

A single line of input containing a string of Roman characters.

Output Format

Output a single line containing True or False according to the instructions above.

Constraints

The number will be between 1 and 3999 (both included).
*/

thousand = 'M{0,3}'
hundred = '(C[MD]|D?C{0,3})'
ten = '(X[CL]|L?X{0,3})'
digit = '(I[VX]|V?I{0,3})'
regex_pattern = thousand + hundred+ten+digit +'$'

import re
print(str(bool(re.match(regex_pattern, input()))))
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Hacker Rank List Comprehension

/* TASK
You are given three integers x,y and z representing the dimensions of a cuboid along with an integer n. Print a list of all possible coordinates given by [i,j,k] a 3D grid where the sum of (i,j,k) is not equal to n. Here, <0=i<=x <0=j<=y <0=k<=z.
*/

if __name__ == '__main__':
    x = int(input())
    y = int(input())
    z = int(input())
    n = int(input())
    co_ordinates=[]
    # for i in range(x+1):
    #     for j in range(y+1):
    #         for k in range(z+1):
    #             if (i+j+k)!=n:
    #                 co_ordinates.append([i,j,k])
    #             else:
    #                 pass
    co_ordinates=[[i,j,k] for i in range(x+1) for j in range(y+1) for k in range(z+1) if(i+j+k)!=n]
    # co_ordinates.sort()
    print(co_ordinates)
