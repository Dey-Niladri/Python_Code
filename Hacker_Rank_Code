-- HackerRank Set problem 

/* TASK
You are given a set A and N number of other sets. These N number of sets have to perform some specific mutation operations on set A.

Your task is to execute those operations and print the sum of elements from set .

Input Format

The first line contains the number of elements in set A.
The second line contains the space separated list of elements in set .
The third line contains N integer , the number of other sets.
The next 2*N lines are divided into N parts containing two lines each.
The first line of each part contains the space separated entries of the operation name and the length of the other set.
The second line of each part contains space separated list of elements in the other set.

 0 < len(set(A)) < 1000
 0 < len(otherSets) < 100
 0 < N < 100

Output Format

Output the sum of elements in set A.*/

a=set()
b=set()
sum=0

def read_STDIN(x):
    
    for i in input().split():
        x.add(int(i))

number_of_arguments = int(input())

read_STDIN(a)

number_of_arguments = int(input())

for i in range(number_of_arguments):
    b=set()
    command = input().split(' ')[0]
    
		if command == 'update':
        read_STDIN(b)
        a.update(b)
        
    elif command == 'intersection_update':
        read_STDIN(b)
        a.intersection_update(b)
        
    elif command == 'difference_update':
        read_STDIN(b)
        a.difference_update(b)
        
    elif command == 'symmetric_difference_update':
        read_STDIN(b)
        a.symmetric_difference_update(b)
        
    else:
        print()

for i in a:
    sum+=i

print(sum)
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/* TASK
Mr. Anant Asankhya is the manager at the INFINITE hotel. The hotel has an infinite amount of rooms.

One fine day, a finite number of tourists come to stay at the hotel.
The tourists consist of:
→ A Captain.
→ An unknown group of families consisting of K members per group where K≠1 .

The Captain was given a separate room, and the rest were given one room per group.

Mr. Anant has an unordered list of randomly arranged room entries. The list consists of the room numbers for all of the tourists. The room numbers will appear K times per group except for the Captain's room.

Mr. Anant needs you to help him find the Captain's room number.
The total number of tourists or the total number of groups of families is not known to you.
You only know the value of K and the room number list.

Input Format

The first line consists of an integer, K , the size of each group.
The second line contains the unordered elements of the room number list.


Constraints
1 < K < 1000

Output Format

Output the Captain's room number.
*/
people_each_room = input()
people_room_no = []

for i in input().split():
    people_room_no.append(int(i))

people_room_no.sort()    

for i in range(len(people_room_no)):
    if i==0:
        if people_room_no[i]==people_room_no[i+1]:
            pass
        else:
            print(people_room_no[i])
    elif 0<i<len(people_room_no)-2:
        if (people_room_no[i-1]==people_room_no[i]) or (people_room_no[i]==people_room_no[i+1]):
            pass
        else :
            print(people_room_no[i])   
    else:
        if people_room_no[i]==people_room_no[i-1]:
            pass
        else:
            print(people_room_no[i])
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/* TASK
You are given two sets, A and B.
Your job is to find whether set A is a subset of set B.

If set A is subset of set B, print True.
If set A is not a subset of set B, print False.

Input Format

The first line will contain the number of test cases, .
The first line of each test case contains the number of elements in set A.
The second line of each test case contains the space separated elements of set A.
The third line of each test case contains the number of elements in set B.
The fourth line of each test case contains the space separated elements of set B.

Output Format

True is A is subset of B
False if A is not a subset of B
*/

number_of_test_cases = int(input())

for i in range(number_of_test_cases):
    A=set()
    B=set()
    number_of_elements_A = int(input())
    counter=0
    for i in input().split():
        counter+=1
        if counter<=number_of_elements_A:
            A.add(int(i))
        else:
            pass
        
    number_of_elements_B = int(input())
    counter=0
    for i in input().split():
        counter+=1
        if counter<=number_of_elements_B:
            B.add(int(i))
        else:
            pass
    
    C = A-B

    if len(C)==0:
        print('True')
    else:
     print('False')
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/* TASK
You are given a set A and n other sets.
Your job is to find whether set A is a strict superset of each of the N sets.

Print True, if A is a strict superset of each of the N sets. Otherwise, print False.

A strict superset has at least one element that does not exist in its subset.

Input Format

The first line contains the space separated elements of set .
The second line contains integer , the number of other sets.
The next  lines contains the space separated elements of the other sets.

Output Format

Print True if set A is a strict superset of all other N sets. Otherwise, print False.
*/

A=set()
for i in input().split():
    A.add(int(i))

n = int(input())
for i in range(n):
    B=set()
    for i in input().split():
        B.add(int(i))
    
    if len(A-B)>0 and len(B-A) == 0:
        is_superset=True
    else:
        is_superset=False
        print('False')
        break
if is_superset:
    print('True')
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/* TASK
You are given a string, and you have to validate whether it's a valid Roman numeral. If it is valid, print True. Otherwise, print False. Try to create a regular expression for a valid Roman numeral.

Input Format

A single line of input containing a string of Roman characters.

Output Format

Output a single line containing True or False according to the instructions above.

Constraints

The number will be between 1 and 3999 (both included).
*/

thousand = 'M{0,3}'
hundred = '(C[MD]|D?C{0,3})'
ten = '(X[CL]|L?X{0,3})'
digit = '(I[VX]|V?I{0,3})'
regex_pattern = thousand + hundred+ten+digit +'$'

import re
print(str(bool(re.match(regex_pattern, input()))))
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- HackerRank List Comprehension

/* TASK
You are given three integers x,y and z representing the dimensions of a cuboid along with an integer n. Print a list of all possible coordinates given by [i,j,k] a 3D grid where the sum of (i,j,k) is not equal to n. Here, <0=i<=x <0=j<=y <0=k<=z.
*/

if __name__ == '__main__':
    x = int(input())
    y = int(input())
    z = int(input())
    n = int(input())
    co_ordinates=[]
    # for i in range(x+1):
    #     for j in range(y+1):
    #         for k in range(z+1):
    #             if (i+j+k)!=n:
    #                 co_ordinates.append([i,j,k])
    #             else:
    #                 pass
    co_ordinates=[[i,j,k] for i in range(x+1) for j in range(y+1) for k in range(z+1) if(i+j+k)!=n]
    # co_ordinates.sort()
    print(co_ordinates)
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- HackerRank Basic Data Types

/* TASK
Given the participants' score sheet for your University Sports Day, you are required to find the runner-up score. You are given n scores. Store them in a list and find the score of the runner-up.
*/

if __name__ == '__main__':
    n = int(input())
    arr=[]
    for i in input().split():
        arr.append(int(i))
    arr.sort(reverse=True)
    # print(arr)
    for i in range(1,len(arr)):
        if arr[i-1]==arr[i]:
            pass
        else:
            print(arr[i])
            break
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/* TASK
Given the names and grades for each student in a class of  students, store them in a nested list and print the name(s) of any student(s) having the second lowest grade.

Note: If there are multiple students with the second lowest grade, order their names alphabetically and print each name on a new line.
Input Format

The first line contains an integer, N , the number of students.
The 2*N subsequent lines describe each student over 2 lines.
- The first line contains a student's name.
- The second line contains their grade.
*/

n=int(input())
records=[]
change=0
second_lowest_grade=0.0

for i in range(n):
    name=str(input())
    grade=float(input())
    records.append([name,grade])

def grade_func(elem):
        return (elem[1],elem[0])

records=sorted(records, key=grade_func)
# print(records)

for i in range(1,len(records)):
    if records[i][1] == records[i-1][1]:
        if records[i][1] == second_lowest_grade:
            print(records[i][0])
        else:
            pass
    else:
        change+=1
        if change==1:
            second_lowest_grade = records[i][1]
            print(records[i][0])
        else:
            break
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/* TASK
The provided code stub will read in a dictionary containing key/value pairs of name:[marks] for a list of students. Print the average of the marks array for the student name provided, showing 2 places after the decimal.
*/

student={}
average_mark=0.00

number_of_student = int(input())
for i in range(number_of_student):
    marks=[]
    input_string=input().split()
    for i in range(4):
        if i == 0:
            name_of_student=input_string[0]
        else:
            marks.append(input_string[i])
    
    student[name_of_student]=marks

# print(student)
query_name = input()
# print(student[query_name])
for i in student[query_name]:
    average_mark+=float(i)
print("{:.2f}".format(average_mark/3))
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/* TASK
You are given an integer, N. Your task is to print an alphabet rangoli of size N. (Rangoli is a form of Indian folk art based on creation of patterns.)

Different sizes of alphabet rangoli are shown below:

#size 3

----c----
--c-b-c--
c-b-a-b-c
--c-b-c--
----c----

#size 5

--------e--------
------e-d-e------
----e-d-c-d-e----
--e-d-c-b-c-d-e--
e-d-c-b-a-b-c-d-e
--e-d-c-b-c-d-e--
----e-d-c-d-e----
------e-d-e------
--------e--------

#size 10

------------------j------------------
----------------j-i-j----------------
--------------j-i-h-i-j--------------
------------j-i-h-g-h-i-j------------
----------j-i-h-g-f-g-h-i-j----------
--------j-i-h-g-f-e-f-g-h-i-j--------
------j-i-h-g-f-e-d-e-f-g-h-i-j------
----j-i-h-g-f-e-d-c-d-e-f-g-h-i-j----
--j-i-h-g-f-e-d-c-b-c-d-e-f-g-h-i-j--
j-i-h-g-f-e-d-c-b-a-b-c-d-e-f-g-h-i-j
--j-i-h-g-f-e-d-c-b-c-d-e-f-g-h-i-j--
----j-i-h-g-f-e-d-c-d-e-f-g-h-i-j----
------j-i-h-g-f-e-d-e-f-g-h-i-j------
--------j-i-h-g-f-e-f-g-h-i-j--------
----------j-i-h-g-f-g-h-i-j----------
------------j-i-h-g-h-i-j------------
--------------j-i-h-i-j--------------
----------------j-i-j----------------
------------------j------------------
The center of the rangoli has the first alphabet letter a, and the boundary has the Nth alphabet letter (in alphabetical order).

Input Format

Only one line of input containing N, the size of the rangoli.

Constraints

0 < N < 27

Output Format

Print the alphabet rangoli in the format explained above.

import string
alphabet=list(string.ascii_lowercase)


def print_rangoli(n):
    if n>=27 or n<0:
        return
    
    if n==1:
        print('a')
        return
    
    n=n+1
    
    for i in range(1,n-1,1):
        line_string=''
        print('--'*(n-1-i), end ="")
        line_string += '--'*(n-1-i)
        j=n-2
        
        while n-1-i<=j<n:
            print(alphabet[j]+'-',end='')
            line_string += alphabet[j]+'-'
            j-=1
        
        print(line_string[-4::-1])
    
    line_string=''
    
    for i in range(n-1,0,-1):
        line_string=''
        print('--'*(n-1-i), end ="")
        line_string += '--'*(n-1-i)
        j=n-2
        
        while n-1-i<=j<n:
            print(alphabet[j]+'-',end='')
            line_string += alphabet[j]+'-'
            j-=1
        
        print(line_string[-4::-1])


if __name__ == '__main__':
    n = int(input())
    print_rangoli(n)
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/* TASK
You are asked to ensure that the first and last names of people begin with a capital letter in their passports. For example, alison heck should be capitalised correctly as Alison Heck.

alison heck ==> Alison Heck

Given a full name, your task is to capitalize the name appropriately.

Input Format

A single line of input containing the full name, S.

Constraints

0 < len(S) < 1000

The string consists of alphanumeric characters and spaces.
Note: in a word only the first character is capitalized. Example 12abc when capitalized remains 12abc.

Output Format

Print the capitalized string, S.
*/

def solve(s):
    str=''
    space=0
    arr=[i for i in s]
    for i in range(len(arr)):
        if i==0 and arr[0]!=' ':
            arr[i]=arr[i].upper()
        elif arr[i]!=' ' and space==1:
            arr[i]=arr[i].upper()
            space=0
        elif arr[i]==' ':
            space=1
        else:
            arr[i]=arr[i].lower()
    print(arr)
    for i in range(len(arr)):
        str+=arr[i]
        
    return str
    
if __name__ == '__main__':
    
    s = input()

    result = solve(s)

    print(result)
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/* TASK
There are 2 playes : Kevin and Stuart. They are playing 'The Minion Game'

Rules of the game :

Each of Kevin and Stuart start making substrings with a given string S
Kevin makes substrings starting only with Vowels
Stuart makes substrings starting with consonants
Each word they make earn them a score of +1
Repititions are considered as unique and thus earn points
At the end, person with more score wins

Input :
A string S

Output :
Name of the wineer and their score (e.g : Kevin 12)
*/

Kevin_Score=0
Stuart_Score=0
Alphabet_List=list(string.ascii_uppercase)
Vowel_List=['A','E','I','O','U']
Consonant_List=list(set(Alphabet_List)-set(Vowel_List))

arr=[i for i in input()]

Len_Arr=len(arr)

for i in range(0,Len_Arr,1):
    if arr[i] in Vowel_List:
        Kevin_Score+=Len_Arr-i
    elif arr[i] in Consonant_List:
        Stuart_Score+=Len_Arr-i
    else:
        print('Only Upper Case Alphabets are allowed.')

if Kevin_Score>Stuart_Score:
    print('Kevin',Kevin_Score)
elif Kevin_Score<Stuart_Score:
    print('Stuart',Stuart_Score)
else:
    print('Draw')
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/* TASK
Consider the following:

A string, s , of length n where s=C0C1C2..Cn-1.
An integer, k , where k is a factor of n.
We can split s into n/k subsegments where each subsegment, ti , consists of a contiguous block of k characters in s. Then, use each ti to create string ui such that:

1) The characters in ui are a subsequence of the characters in ti.
2) Any repeat occurrence of a character is removed from the string such that each character in ui occurs exactly once. In other words, if the character at some index j in ti occurs at a previous index <j in ti, then do not include the character in string ui.

Given s and k, print n/k lines where each line i denotes string ui.

Input Format

The first line contains a single string denoting s.
The second line contains an integer, k , denoting the length of each subsegment.

Constraints

1) 1<=n<=10^4, where n is the length of s
2) 1<=k<=n
3) It is guaranteed that  is a multiple of .

Output Format

Print n/k lines where each line i contains string ui.
*/

def merge_the_tools(string, k):
    list_=[]
    substr_list_=[]

    for i in string:
        list_.append(i)

    no_of_segments=len(list_)//k

    for i in range(0,no_of_segments,1):
        substr_list_= []
        substr_set_ = ()
        str=''
        substr_list_= [i for i in list_[(0+k*i):(k*(i+1)):1]]
        for j in substr_list_:
            if j not in str:
                str+=j
            else:
                pass
        print(str)

if __name__ == '__main__':
    string, k = input(), int(input())
    merge_the_tools(string, k)
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/* TASK
You are given two arrays A and B . Both have dimensions of N X N.
Your task is to compute their matrix product.

Input Format

The first line contains the integer N.
The next N lines contains N space separated integers of array A.
The following N lines contains N space separated integers of array B.

Output Format

Print the matrix multiplication of A and B.
*/

import numpy
n=int(input())
a = numpy.array([input().split() for i in range(n)],int)
b = numpy.array([input().split() for i in range(n)],int)
m = numpy.dot(a,b)
print (m)
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
